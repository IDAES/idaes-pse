name: Run IDAES examples
description: Run IDAES examples
inputs:
  git-ref:
    description: git ref to fetch for the examples
    required: false
    default: main
  working-dir:
    description: Working directory where the examples will be run
    required: false
    default: ${{ runner.temp }}
  config-file-name:
    description: Name of the build script config file
    required: false
    default: build-config-for-idaes-ci.yml 
  build-logs-path:
    description: Path or glob to the file(s) where build error logs are saved
    required: false
    default: '*errors.txt'
# TODO as a first step we display the error logs since they have terminal-friendly output
# we can activate this action output if we'll need to upload the artifacts
# outputs:
#   build-artifacts:
#     description: Stores artifacts produced during the build process, in a format suitable for being used with actions/upload-artifact
#     value: ${{ steps.build.paths }}

runs:
  using: composite
  steps:
    - name: Fetch examples
      working-directory: ${{ inputs.working-dir }}
      shell: bash
      run: |
        rm -rf *
        git clone https://github.com/IDAES/examples-pse.git --branch ${{ inputs.git-ref }} .
        git log -n 1
    - name: Set up config file
      shell: python3 {0}
      working-directory: ${{ inputs.working-dir }}
      env:
        _config_file_name: ${{ inputs.config-file-name }}
      run: |
        from os import (
            environ as env,
            fspath
        )
        from pathlib import Path

        def _add_to_runner_env(key, val):
            env_file_path = Path(env["GITHUB_ENV"])
            with env_file_path.open('a') as f:
                f.write(f'{key}={val}')

        action_dir = Path(env["GITHUB_ACTION_PATH"])
        config_file_name = env["_config_file_name"]
        config_file_path = action_dir / config_file_name
        assert config_file_path.exists(), f"ERROR: Config file path {config_file_path} does not exist"
        _add_to_runner_env("_config_file_path", fspath(config_file_path))

    - name: Run build.py script
      working-directory: ${{ inputs.working-dir }}
      # by using a custom shell specification, we override the default "fails fast" behavior
      # to allow displaying the content of the error logs in case the build process fails
      # shell: bash --noprofile --norc {0}
      shell: bash
      run: |
        echo "::group::Contents of config file $_config_file_path"
        cat "$_config_file_path"
        echo "::endgroup"
        echo "::group::Output of build.py"
        python build.py -v --config "$_config_file_path"
        echo "::endgroup"
        echo "::group::Contents of output file(s) ${{ inputs.build-logs-path }}"
        cat ${{ inputs.build-logs-path }} || echo "No matching files found"
        echo "::endgroup"
